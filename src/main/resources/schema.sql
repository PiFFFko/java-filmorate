-- cleaning DB
DROP TABLE IF EXISTS GENRES,
    RATINGS,
    USERS,
    FILMS,
    FRIEND_REQUESTS,
    LIKES,
    FILM_CATEGORY,
    DIRECTORS,
    FILM_DIRECTOR,
    REVIEWS,
    REVIEWS_GRADES;

-- PUBLIC.GENRES definition
CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID   INTEGER NOT NULL AUTO_INCREMENT,
    GENRE_NAME CHARACTER VARYING(50),
    CONSTRAINT GENRES_PK PRIMARY KEY (GENRE_ID)
);

-- PUBLIC.RATINGS definition
CREATE TABLE IF NOT EXISTS RATINGS
(
    RATING_ID   INTEGER           NOT NULL AUTO_INCREMENT,
    RATING_NAME CHARACTER VARYING NOT NULL,
    CONSTRAINT RATINGS_PK PRIMARY KEY (RATING_ID)
);

-- PUBLIC.USERS definition
CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID  INTEGER               NOT NULL AUTO_INCREMENT,
    EMAIL    CHARACTER VARYING(50) NOT NULL,
    LOGIN    CHARACTER VARYING(20) NOT NULL,
    NAME     CHARACTER VARYING(20),
    BIRTHDAY DATE,
    CONSTRAINT USERS_PK PRIMARY KEY (USER_ID)
);

-- PUBLIC.FILMS definition
CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID      INTEGER                NOT NULL AUTO_INCREMENT,
    DESCRIPTION  CHARACTER VARYING(200),
    NAME         CHARACTER VARYING(100) NOT NULL,
    RELEASE_DATE DATE,
    DURATION     INTEGER,
    RATING_ID    INTEGER,
    CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID),
    CONSTRAINT FILMS_FK
        FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.RATINGS (RATING_ID) ON DELETE CASCADE ON UPDATE RESTRICT
);

-- PUBLIC.FRIEND_REQUESTS definition
CREATE TABLE IF NOT EXISTS FRIEND_REQUESTS
(
    USER_ID_FROM  INTEGER NOT NULL,
    USER_ID_TO    INTEGER NOT NULL,
    FRIEND_STATUS BOOLEAN NOT NULL DEFAULT FALSE,
    CONSTRAINT FRIENDS_PK PRIMARY KEY (USER_ID_FROM,
                                       USER_ID_TO),
    CONSTRAINT FRIENDS_FK
        FOREIGN KEY (USER_ID_FROM) REFERENCES PUBLIC.USERS (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FRIENDS_FK_1
        FOREIGN KEY (USER_ID_TO) REFERENCES PUBLIC.USERS (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- PUBLIC.LIKES definition
CREATE TABLE IF NOT EXISTS LIKES
(
    FILM_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    CONSTRAINT LIKES_PK PRIMARY KEY (USER_ID,
                                     FILM_ID),
    CONSTRAINT LIKES_FK
        FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS (FILM_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT LIKES_FK_1
        FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- PUBLIC.FILM_CATEGORY definition
CREATE TABLE IF NOT EXISTS FILM_CATEGORY
(
    FILM_ID  INTEGER NOT NULL,
    GENRE_ID INTEGER NOT NULL,
    CONSTRAINT FILM_CATEGORY_PK PRIMARY KEY (GENRE_ID,
                                             FILM_ID),
    CONSTRAINT FILM_CATEGORY_FK
        FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRES (GENRE_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FILM_CATEGORY_FK_1
        FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS (FILM_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- PUBLIC.DIRECTORS definition
CREATE TABLE IF NOT EXISTS DIRECTORS
(
    ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME CHARACTER VARYING(100) NOT NULL
);

-- PUBLIC.FILM_DIRECTOR definition
CREATE TABLE IF NOT EXISTS FILM_DIRECTOR
(
    FILM_ID     INTEGER,
    DIRECTOR_ID INTEGER,
    CONSTRAINT FILM_DIRECTOR_FK
        FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS (FILM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
    CONSTRAINT FILM_DIRECTOR_FK_1
        FOREIGN KEY (DIRECTOR_ID) REFERENCES PUBLIC.DIRECTORS (ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

-- PUBLIC.REVIEWS definition
CREATE TABLE IF NOT EXISTS REVIEWS
(
    review_id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     VARCHAR(200) NOT NULL,
    is_positive BOOLEAN      NOT NULL,
    user_id     INTEGER REFERENCES USERS (USER_ID),
    film_id     INTEGER REFERENCES FILMS (FILM_ID),
    useful      INTEGER      NOT NULL
);

-- PUBLIC.REVIEWS_GRADES definition
CREATE TABLE IF NOT EXISTS REVIEWS_GRADES
(
    review_id  INTEGER REFERENCES REVIEWS (review_id) ON DELETE CASCADE,
    user_id    INTEGER REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    grade_type BOOLEAN,
    PRIMARY KEY (review_id, user_id)
);