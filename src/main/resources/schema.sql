drop table IF EXISTS
   FILMS,
   RATINGS,
   GENRES,
   FILMS_GENRES,
   USERS,
   FRIEND_REQUESTS,
   FILM_CATEGORY,
   DIRECTORS,
   FILM_DIRECTOR,
   REVIEWS,
   REVIEWS_GRADES,
   LIKES;


create TABLE IF NOT EXISTS FILMS
(
    FILM_ID      INTEGER                NOT NULL AUTO_INCREMENT,
    NAME         CHARACTER VARYING(100) NOT NULL,
    DESCRIPTION  CHARACTER VARYING(200),
    RELEASE_DATE DATE,
    DURATION     INTEGER,
    RATING_ID    INTEGER,
    CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID),
    CONSTRAINT FILMS_FK FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.RATINGS (RATING_ID) ON delete CASCADE ON update RESTRICT
);


create TABLE IF NOT EXISTS RATINGS
(
    RATING_ID   INTEGER           NOT NULL AUTO_INCREMENT,
    RATING_NAME CHARACTER VARYING NOT NULL,
    CONSTRAINT RATINGS_PK PRIMARY KEY (RATING_ID)
);


create TABLE IF NOT EXISTS GENRES
(
	GENRE_ID INTEGER NOT NULL AUTO_INCREMENT,
	GENRE_NAME CHARACTER VARYING(50),
	CONSTRAINT GENRES_PK PRIMARY KEY (GENRE_ID)
);


create TABLE IF NOT EXISTS FILMS_GENRES (
    FILMS_GENRE_ID INTEGER generated by default as identity primary key,
    FILM_ID        INTEGER,
    GENRE_ID       INTEGER,
    CONSTRAINT FILMS_GENRES_PK PRIMARY KEY (FILMS_GENRE_ID),
    CONSTRAINT FILMS_GENRES_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS ON update CASCADE,
    CONSTRAINT FILMS_GENRES_FK_1 FOREIGN KEY (GENRE_ID) REFERENCES GENRES ON update CASCADE
);


create TABLE IF NOT EXISTS USERS
(
    USER_ID  INTEGER               NOT NULL AUTO_INCREMENT,
    EMAIL    CHARACTER VARYING(50) NOT NULL,
    LOGIN    CHARACTER VARYING(20) NOT NULL,
    NAME     CHARACTER VARYING(20),
    BIRTHDAY DATE,
    CONSTRAINT USERS_PK PRIMARY KEY (USER_ID)
);


create TABLE IF NOT EXISTS FRIEND_REQUESTS
(
    USER_ID_FROM  INTEGER NOT NULL,
    USER_ID_TO    INTEGER NOT NULL,
    FRIEND_STATUS BOOLEAN NOT NULL DEFAULT false,
    CONSTRAINT FRIENDS_PK PRIMARY KEY (USER_ID_FROM, USER_ID_TO),
    CONSTRAINT FRIENDS_FK FOREIGN KEY (USER_ID_FROM) REFERENCES PUBLIC.USERS (USER_ID) ON delete CASCADE ON update CASCADE,
    CONSTRAINT FRIENDS_FK_1 FOREIGN KEY (USER_ID_TO) REFERENCES PUBLIC.USERS (USER_ID) ON delete CASCADE ON update CASCADE
);


create TABLE IF NOT EXISTS FILM_CATEGORY
(
    FILM_ID  INTEGER NOT NULL,
    GENRE_ID INTEGER NOT NULL,
    CONSTRAINT FILM_CATEGORY_PK PRIMARY KEY (GENRE_ID, FILM_ID),
    CONSTRAINT FILM_CATEGORY_FK FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRES (GENRE_ID) ON delete CASCADE ON update CASCADE,
    CONSTRAINT FILM_CATEGORY_FK_1 FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS (FILM_ID) ON delete CASCADE ON update CASCADE
);


create TABLE IF NOT EXISTS DIRECTORS
(
    ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME CHARACTER VARYING(100) NOT NULL
);


create TABLE IF NOT EXISTS FILM_DIRECTOR
(
    FILM_ID     INTEGER,
    DIRECTOR_ID INTEGER,
    CONSTRAINT FILM_DIRECTOR_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS (FILM_ID) ON delete RESTRICT ON update RESTRICT,
    CONSTRAINT FILM_DIRECTOR_FK_1 FOREIGN KEY (DIRECTOR_ID) REFERENCES PUBLIC.DIRECTORS (ID) ON delete RESTRICT ON update RESTRICT
);

create TABLE IF NOT EXISTS REVIEWS (
    review_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content VARCHAR(200) NOT NULL,
    is_positive BOOLEAN NOT NULL,
    user_id INTEGER REFERENCES USERS(USER_ID),
    film_id INTEGER REFERENCES FILMS(FILM_ID),
    useful INTEGER NOT NULL
);

create TABLE IF NOT EXISTS REVIEWS_GRADES (
    review_id INTEGER REFERENCES REVIEWS(review_id) ON delete CASCADE ON update CASCADE,
    user_id INTEGER REFERENCES USERS(USER_ID) ON delete CASCADE ON update CASCADE,
    grade_type BOOLEAN,
    PRIMARY KEY(review_id, user_id)
);

create TABLE IF NOT EXISTS LIKES
(
    LIKE_ID INTEGER generated by default as identity PRIMARY KEY,
    FILM_ID INTEGER NOT NULL,
    USER_ID INTEGER NOT NULL,
    CONSTRAINT LIKES_PK PRIMARY KEY (LIKE_ID),
    CONSTRAINT LIKES_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS (FILM_ID) ON delete CASCADE ON update CASCADE,
    CONSTRAINT LIKES_FK_1 FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (USER_ID) ON delete CASCADE ON update CASCADE




